generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id           String       @id @default(uuid())
  apiKey       String
  appVersion   String?
  appType      String?
  releaseStage String?
  timestamp    DateTime
  category     String?
  type         String
  sdk          Json
  detail       Json
  device       Json
  actions      Json?
  metadata     Json?
  createdAt    DateTime     @default(now()) @db.Timestamp
  userId       String
  user         EventUser    @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueId      String
  issue        Issue        @relation(fields: [issueId], references: [id], onDelete: Cascade)
  alertEvents  AlertEvent[]

  @@index([apiKey])
  @@index([createdAt(ops: TimestampBloomOps)], type: Brin)
}

model Metric {
  id           String    @id @default(uuid())
  apiKey       String
  appVersion   String?
  appType      String?
  releaseStage String?
  timestamp    DateTime
  category     String?
  type         String
  sdk          Json
  device       Json
  CLS          Float?
  FCP          Float?
  FID          Float?
  LCP          Float?
  TTFB         Float?
  createdAt    DateTime  @default(now()) @db.Timestamp
  userId       String
  user         EventUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([apiKey])
  @@index([createdAt(ops: TimestampBloomOps)], type: Brin)
}

model Feedback {
  id           String    @id @default(uuid())
  apiKey       String
  appVersion   String?
  appType      String?
  releaseStage String?
  timestamp    DateTime
  category     String?
  type         String
  sdk          Json
  detail       Json
  device       Json
  createdAt    DateTime  @default(now()) @db.Timestamp
  userId       String
  user         EventUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([apiKey])
  @@index([createdAt(ops: TimestampBloomOps)], type: Brin)
}

model PageView {
  id           Int       @id @default(autoincrement())
  apiKey       String
  appVersion   String?
  appType      String?
  releaseStage String?
  timestamp    DateTime
  category     String?
  type         String
  sdk          Json
  device       Json
  createdAt    DateTime  @default(now()) @db.Timestamp
  userId       String
  user         EventUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([apiKey])
  @@index([createdAt(ops: TimestampBloomOps)], type: Brin)
}

model UserView {
  id           Int       @id @default(autoincrement())
  apiKey       String
  appVersion   String?
  appType      String?
  releaseStage String?
  timestamp    DateTime
  category     String?
  type         String
  sdk          Json
  device       Json
  createdAt    DateTime  @default(now()) @db.Timestamp
  userId       String
  user         EventUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([apiKey])
  @@index([createdAt(ops: TimestampBloomOps)], type: Brin)
}

model Issue {
  id        String   @id
  apiKey    String
  type      String
  metadata  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events      Event[]
  users       EventUsersOnIssues[]
  alertEvents AlertEvent[]

  @@index([apiKey, metadata])
}

model EventUser {
  id        String               @id
  ipAddress String
  uuid      String?
  email     String?
  name      String?
  metadata  Json?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  issues    EventUsersOnIssues[]
  events    Event[]
  metrics   Metric[]
  feedbacks Feedback[]
  pageViews PageView[]
  userViews UserView[]
}

model EventUsersOnIssues {
  issueId     String
  eventUserId String
  assignedAt  DateTime  @default(now())
  eventUser   EventUser @relation(fields: [eventUserId], references: [id], onDelete: Cascade)
  issue       Issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@id([issueId, eventUserId])
}

model Project {
  id        Int               @id @default(autoincrement())
  apiKey    String            @unique
  name      String            @unique
  type      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  default   Boolean           @default(false)
  image     String?
  releases  Release[]
  alerts    Alert[]
  users     UsersOnProjects[]
}

model Release {
  id         Int      @id @default(autoincrement())
  appVersion String
  appType    String?
  sourceMaps Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  projectId  Int
  apiKey     String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum AlertLevel {
  serious
  warning
  default
}

model Alert {
  id             Int          @id @default(autoincrement())
  name           String
  releaseStage   String       @default("production")
  level          AlertLevel
  interval       String
  enabled        Boolean      @default(true)
  actions        Json
  conditions     Json
  filters        Json
  conditionMatch String
  filterMatch    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  recentlyAt     DateTime?
  projectId      Int
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  alertEvents    AlertEvent[]
}

model AlertEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp
  alertId   Int
  alert     Alert    @relation(fields: [alertId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([createdAt(ops: TimestampBloomOps)], type: Brin)
}

model Account {
  id                String  @id @default(cuid())
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  provider          String
  providerAccountId String
  scope             String?
  refresh_token     String? @map("refreshToken") @db.Text
  session_state     String? @map("sessionState") @db.Text
  id_token          String? @map("idToken") @db.Text
  token_type        String? @map("tokenType")
  type              String
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  email         String?           @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      UsersOnProjects[]
}

model UsersOnProjects {
  userId     String
  projectId  Int
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
