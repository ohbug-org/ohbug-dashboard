generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id           String   @id @default(uuid())
  apiKey       String
  appVersion   String?
  appType      String?
  releaseStage String?
  timestamp    DateTime
  category     String?
  type         String
  sdk          Json
  detail       Json
  device       Json
  user         Json?
  actions      Json?
  metadata     Json?
  createdAt    DateTime @default(now())
  issueId      String
  issue        Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model Issue {
  id        String               @id
  apiKey    String
  type      String
  metadata  Json
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  events    Event[]
  users     EventUsersOnIssues[]
}

model EventUser {
  id        String               @id
  ipAddress String
  uuid      String?
  email     String?
  name      String?
  metadata  Json?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  issues    EventUsersOnIssues[]
}

model EventUsersOnIssues {
  issueId     String
  eventUserId String
  assignedAt  DateTime  @default(now())
  eventUser   EventUser @relation(fields: [eventUserId], references: [id])
  issue       Issue     @relation(fields: [issueId], references: [id])

  @@id([issueId, eventUserId])
}

model Setting {
  id                 Int    @id @default(autoincrement())
  githubClientId     String
  githubClientSecret String
}

model Project {
  id        Int       @id @default(autoincrement())
  apiKey    String    @unique
  name      String    @unique
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  default   Boolean   @default(false)
  image     String?
  releases  Release[]
}

model Release {
  id         Int      @id @default(autoincrement())
  appVersion String
  appType    String?
  sourceMaps Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  projectId  Int
  apiKey     String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  providerAccountId String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
